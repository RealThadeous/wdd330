GRANT BOREHAM WDD330 WEEK 3 NOTES

Monday 17 January
Continued with chapter 3 of "Eloquent JavaScript" book:
    -let and const are local to the block they are created in. var is visible in a global scope
    -you can declare a function binding by putting "function" first e.g. function square(x) {return x * x;}. This allows you to order the code as you please
    and not from top-to-bottom (i.e. the function can be declared after the code that calls the function)
    -arrow function "=>" is used to replace the word function e.g. original const power = function(base, exponent) {insert rest of code}, can rather be typed
    const power = (base, exponent) => {insert rest of code}
    -When there is only 1 parameter then you do not need the brackets around the parameter e.g. const square1 = (x) => { return x * x; }; const square2 = x => x * x;
    -When no parameter then just empty brackets i.e. const horn = () => {console.log("Toot");};
    -If you give function one parameter, but then then try and call two parameters, the code will ignore they second parameter call e.g. function square(x) { return x * x; } console.log(square(4, true, "hedgehog")); // → 16
    -If you pass/call too few parameters, the missing paramters are assigned the value "undefined"
    -If there is a missing parameter you can tell the code what to do e.g. function minus(a, b) {if (b === undefined) return -a;else return a - b;}console.log(minus(10)); // → -10 console.log(minus(10, 5)); // → 5
    -Alternatively you can set the value of a parameter incase it is not given e.g. function power(base, exponent = 2) {let result = 1; for (let count = 0; count < exponent; count++) {result *= base;}return result;} console.log(power(4)); // → 16 console.log(power(2, 6)); // → 64
    -Always start off with writing code that is correct, and if you are worried it is too slow then come and optimize it.
    -Completed Chapter 3 Exercises 1 & 3 with the help of the author NOTES

Tuesday 18 January
Began reading Chapter 4 of "Eloquent JavaScript" book:
    -array used for storing data for sequences of values e.g. let listOfNumbers = [2 , 3 , 5 , 7 , 11];
    -data is indexed starting from 0. so to call the number 3 from the list we would use index position 1 e.g. console.log(listOfNumbers[1]); // → 3
    -toUpperCase to make all letters in string uppercase letters and toLowerCase is opposite. These are known as METHODS
    -pop and push are other METHODS, pop removes last value in array, while push adds value to the end of the array
    -create objects using braces e.g. {insert properties with values} 
    -view an OBJECTS PROPERTIES you use the objectsname.keys e.g. console.log(Object.keys({x: 0, y: 0, z: 2})); // → ["x", "y", "z"]
    -object.assign copies properties into another object or overwrites existing data in the object e.g. let objectA = {a: 1, b: 2}; Object.assign(objectA, {b: 3, c: 4}); console.log(objectA); // → {a: 1, b: 3, c: 4}
    -UNSHIFT AND SHIFT are other METHODS, SHIFT removes FIRST value in array, while UNSHIFT adds value to the START of the array
    
Wednesday 19 January
Began reading "Object Methods: this" on javascript.info website:
    -A function that is a property of an object is called its METHOD
    -The value of "this" is the object “before dot”, the one used to call the method, e.g. let user = {name: "John", age: 30, sayHi() {// "this" is the "current object" alert(this.name);} }; user.sayHi(); // John
     In this example "this" is replacing the object "user". Using "this" instead of the object name helps to avoid problems e.g. if you overwrite the object with another variable e.g. user = admin.
    -Complete the "Create a Calculator" exercise